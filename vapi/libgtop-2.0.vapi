/* libgtop-2.0.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "glibtop", gir_namespace = "GTop", gir_version = "2.0", lower_case_cprefix = "glibtop_")]
namespace GTop {
	[CCode (cheader_filename = "glibtop/command.h", cname = "glibtop_command", has_type_id = false, lower_case_cprefix = "glibtop_")]
	[GIR (name = "glibtop_command")]
	public struct Command {
		public uint64 command;
		public uint64 size;
		public uint64 data_size;
		[CCode (array_length = false)]
		public char parameter[16];
	}
	[CCode (cheader_filename = "glibtop.h", cname = "glibtop", lower_case_cprefix = "glibtop_", type_id = "glibtop_get_type ()")]
	[GIR (name = "glibtop")]
	public struct Context {
		public uint flags;
		public uint method;
		public uint error_method;
		[CCode (array_length = false)]
		public int input[2];
		[CCode (array_length = false)]
		public int output[2];
		public int socket;
		public int ncpu;
		public int real_ncpu;
		public ulong os_version_code;
		public string name;
		public string server_command;
		public string server_host;
		public string server_user;
		public string server_rsh;
		public ulong features;
		public ulong server_port;
		public GTop.SysDeps sysdeps;
		public GTop.SysDeps required;
		public int pid;
		public uint uid;
		public uint euid;
		public uint gid;
		public uint egid;
		public GTop.Machine machine;
		public void* call_l (uint command, size_t send_size, void* send_buf, size_t recv_size, void* recv_buf);
		public void* call_s (uint command, size_t send_size, void* send_buf, size_t recv_size, void* recv_buf);
		[CCode (cheader_filename = "glibtop.h")]
		public static void close ();
		public void close_p ();
		public void close_r ();
		public void close_s ();
		[CCode (cheader_filename = "glibtop.h")]
		public static void get_cpu (out GTop.Cpu buf);
		public void get_cpu_l (out GTop.Cpu buf);
		public void get_cpu_s (out GTop.Cpu buf);
		[CCode (cheader_filename = "glibtop.h")]
		public static void get_fsusage (out GTop.FsUsage buf, string mount_dir);
		public void get_fsusage_l (out GTop.FsUsage buf, string mount_dir);
		public void get_fsusage_s (out GTop.FsUsage buf, string mount_dir);
		[CCode (cheader_filename = "glibtop.h")]
		public static void get_loadavg (out GTop.LoadAvg buf);
		public void get_loadavg_l (out GTop.LoadAvg buf);
		public void get_loadavg_s (out GTop.LoadAvg buf);
		[CCode (cheader_filename = "glibtop.h")]
		public static void get_mem (out GTop.Mem buf);
		public void get_mem_l (out GTop.Mem buf);
		public void get_mem_s (out GTop.Mem buf);
		[CCode (array_length = false, array_null_terminated = true, cheader_filename = "glibtop.h")]
		public static GTop.MountEntry[] get_mountlist (out GTop.MountList buf, int all_fs);
		[CCode (array_length = false, array_null_terminated = true)]
		public GTop.MountEntry[] get_mountlist_l (out GTop.MountList buf, int all_fs);
		[CCode (array_length = false, array_null_terminated = true)]
		public GTop.MountEntry[] get_mountlist_s (out GTop.MountList buf, int all_fs);
		[CCode (cheader_filename = "glibtop.h")]
		public static void get_msg_limits (out GTop.MsgLimits buf);
		public void get_msg_limits_l (out GTop.MsgLimits buf);
		public void get_msg_limits_s (out GTop.MsgLimits buf);
		[CCode (array_length = false, array_null_terminated = true, cheader_filename = "glibtop.h")]
		public static string[] get_netlist (out GTop.NetList buf);
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] get_netlist_l (out GTop.NetList buf);
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] get_netlist_s (out GTop.NetList buf);
		[CCode (cheader_filename = "glibtop.h")]
		public static void get_netload (out GTop.NetLoad buf, string @interface);
		public void get_netload_l (out GTop.NetLoad buf, string @interface);
		public void get_netload_s (out GTop.NetLoad buf, string @interface);
		public size_t get_parameter_l (uint parameter, void* data_ptr, size_t data_size);
		[CCode (cheader_filename = "glibtop.h")]
		public static void get_ppp (out GTop.Ppp buf, ushort device);
		public void get_ppp_l (out GTop.Ppp buf, ushort device);
		public void get_ppp_s (out GTop.Ppp buf, ushort device);
		[CCode (cheader_filename = "glibtop.h")]
		public static uint16 get_proc_affinity (out GTop.ProcAffinity buf, int pid);
		public uint16 get_proc_affinity_l (out GTop.ProcAffinity buf, int pid);
		public uint16 get_proc_affinity_s (out GTop.ProcAffinity buf, int pid);
		[CCode (cheader_filename = "glibtop.h")]
		public static string get_proc_args (out GTop.ProcArgs buf, int pid, uint max_len);
		public string get_proc_args_l (out GTop.ProcArgs buf, int pid, uint max_len);
		public string get_proc_args_s (out GTop.ProcArgs buf, int pid, uint max_len);
		[CCode (array_length = false, array_null_terminated = true, cheader_filename = "glibtop.h")]
		public static string[] get_proc_argv (out GTop.ProcArgs buf, int pid, uint max_len);
		[CCode (cheader_filename = "glibtop.h")]
		public static void get_proc_io (out GTop.ProcIO buf, int pid);
		public void get_proc_io_l (out GTop.ProcIO buf, int pid);
		public void get_proc_io_s (out GTop.ProcIO buf, int pid);
		[CCode (cheader_filename = "glibtop.h")]
		public static void get_proc_kernel (out GTop.ProcKernel buf, int pid);
		public void get_proc_kernel_l (out GTop.ProcKernel buf, int pid);
		public void get_proc_kernel_s (out GTop.ProcKernel buf, int pid);
		[CCode (array_length = false, array_null_terminated = true, cheader_filename = "glibtop.h")]
		public static GTop.MapEntry[] get_proc_map (out GTop.ProcMap buf, int pid);
		[CCode (array_length = false, array_null_terminated = true)]
		public GTop.MapEntry[] get_proc_map_l (out GTop.ProcMap buf, int pid);
		[CCode (array_length = false, array_null_terminated = true)]
		public GTop.MapEntry[] get_proc_map_s (out GTop.ProcMap buf, int pid);
		[CCode (cheader_filename = "glibtop.h")]
		public static void get_proc_mem (out GTop.ProcMem buf, int pid);
		public void get_proc_mem_l (out GTop.ProcMem buf, int pid);
		public void get_proc_mem_s (out GTop.ProcMem buf, int pid);
		[CCode (array_length = false, array_null_terminated = true, cheader_filename = "glibtop.h")]
		public static GTop.OpenFileEntry[] get_proc_open_files (out GTop.ProcOpenFiles buf, int pid);
		[CCode (array_length = false, array_null_terminated = true)]
		public GTop.OpenFileEntry[] get_proc_open_files_l (out GTop.ProcOpenFiles buf, int pid);
		[CCode (array_length = false, array_null_terminated = true)]
		public GTop.OpenFileEntry[] get_proc_open_files_s (out GTop.ProcOpenFiles buf, int pid);
		[CCode (cheader_filename = "glibtop.h")]
		public static void get_proc_segment (out GTop.Segment buf, int pid);
		public void get_proc_segment_l (out GTop.Segment buf, int pid);
		public void get_proc_segment_s (out GTop.Segment buf, int pid);
		[CCode (cheader_filename = "glibtop.h")]
		public static void get_proc_signal (out GTop.Signal buf, int pid);
		public void get_proc_signal_l (out GTop.Signal buf, int pid);
		public void get_proc_signal_s (out GTop.Signal buf, int pid);
		[CCode (cheader_filename = "glibtop.h")]
		public static void get_proc_state (out GTop.ProcState buf, int pid);
		public void get_proc_state_l (out GTop.ProcState buf, int pid);
		public void get_proc_state_s (out GTop.ProcState buf, int pid);
		[CCode (cheader_filename = "glibtop.h")]
		public static void get_proc_time (out GTop.ProcTime buf, int pid);
		public void get_proc_time_l (out GTop.ProcTime buf, int pid);
		public void get_proc_time_s (out GTop.ProcTime buf, int pid);
		[CCode (cheader_filename = "glibtop.h")]
		public static void get_proc_uid (out GTop.ProcUid buf, int pid);
		public void get_proc_uid_l (out GTop.ProcUid buf, int pid);
		public void get_proc_uid_s (out GTop.ProcUid buf, int pid);
		[CCode (array_length = false, array_null_terminated = true, cheader_filename = "glibtop.h")]
		public static string[] get_proc_wd (out GTop.ProcWd buf, int pid);
		[CCode (array_length = false, array_null_terminated = true, cheader_filename = "glibtop.h")]
		public static int[] get_proclist (out GTop.ProcList buf, int64 which, int64 arg);
		[CCode (array_length = false, array_null_terminated = true)]
		public int[] get_proclist_l (out GTop.ProcList buf, int64 which, int64 arg);
		[CCode (array_length = false, array_null_terminated = true)]
		public int[] get_proclist_s (out GTop.ProcList buf, int64 which, int64 arg);
		[CCode (cheader_filename = "glibtop.h")]
		public static void get_sem_limits (out GTop.SemLimits buf);
		public void get_sem_limits_l (out GTop.SemLimits buf);
		public void get_sem_limits_s (out GTop.SemLimits buf);
		[CCode (cheader_filename = "glibtop.h")]
		public static void get_shm_limits (out GTop.ShmLimits buf);
		public void get_shm_limits_l (out GTop.ShmLimits buf);
		public void get_shm_limits_s (out GTop.ShmLimits buf);
		[CCode (cheader_filename = "glibtop.h")]
		public static void get_swap (out GTop.Swap buf);
		public void get_swap_l (out GTop.Swap buf);
		public void get_swap_s (out GTop.Swap buf);
		[CCode (cheader_filename = "glibtop.h")]
		public static void get_sysdeps (out GTop.SysDeps buf);
		public void get_sysdeps_r (out GTop.SysDeps buf);
		[CCode (cheader_filename = "glibtop.h")]
		public static unowned GTop.SysInfo? get_sysinfo ();
		public unowned GTop.SysInfo? get_sysinfo_s ();
		[CCode (cheader_filename = "glibtop.h")]
		public static void get_uptime (out GTop.Uptime buf);
		public void get_uptime_l (out GTop.Uptime buf);
		public void get_uptime_s (out GTop.Uptime buf);
		[CCode (cheader_filename = "glibtop.h")]
		public static unowned GTop.Context? init ();
		public void init_p (ulong features, uint flags);
		[CCode (cheader_filename = "glibtop.h")]
		public static unowned GTop.Context? init_r (out GTop.Context server_ptr, ulong features, uint flags);
		[CCode (cheader_filename = "glibtop.h")]
		public static unowned GTop.Context? init_s (out GTop.Context server_ptr, ulong features, uint flags);
		[CCode (cheader_filename = "glibtop.h")]
		public static long internet_addr (string host);
		[CCode (cheader_filename = "glibtop.h")]
		public static int make_connection (string hostarg, int portarg, int s);
		public void open_l (string program_name, ulong features, uint flags);
		public void open_p (string program_name, ulong features, uint flags);
		public void open_s (string program_name, ulong features, uint flags);
		public void set_parameter_l (uint parameter, void* data_ptr, size_t data_size);
	}
	[CCode (cheader_filename = "glibtop/cpu.h", cname = "glibtop_cpu", has_type_id = false, lower_case_cprefix = "glibtop_")]
	[GIR (name = "glibtop_cpu")]
	public struct Cpu {
		public uint64 flags;
		public uint64 total;
		public uint64 user;
		public uint64 nice;
		public uint64 sys;
		public uint64 idle;
		public uint64 iowait;
		public uint64 irq;
		public uint64 softirq;
		public uint64 frequency;
		[CCode (array_length = false)]
		public uint64 xcpu_total[1024];
		[CCode (array_length = false)]
		public uint64 xcpu_user[1024];
		[CCode (array_length = false)]
		public uint64 xcpu_nice[1024];
		[CCode (array_length = false)]
		public uint64 xcpu_sys[1024];
		[CCode (array_length = false)]
		public uint64 xcpu_idle[1024];
		[CCode (array_length = false)]
		public uint64 xcpu_iowait[1024];
		[CCode (array_length = false)]
		public uint64 xcpu_irq[1024];
		[CCode (array_length = false)]
		public uint64 xcpu_softirq[1024];
		public uint64 xcpu_flags;
	}
	[CCode (cheader_filename = "glibtop/sysinfo.h", cname = "glibtop_entry", has_type_id = false, lower_case_cprefix = "glibtop_")]
	[GIR (name = "glibtop_entry")]
	public struct Entry {
		public GLib.GenericArray<weak string> labels;
		public GLib.HashTable<string,string> values;
		public weak GLib.HashTable<void*,void*> descriptions;
	}
	[CCode (cheader_filename = "glibtop/fsusage.h", cname = "glibtop_fsusage", has_type_id = false, lower_case_cprefix = "glibtop_")]
	[GIR (name = "glibtop_fsusage")]
	public struct FsUsage {
		public uint64 flags;
		public uint64 blocks;
		public uint64 bfree;
		public uint64 bavail;
		public uint64 files;
		public uint64 ffree;
		public uint32 block_size;
		public uint64 read;
		public uint64 write;
	}
	[CCode (cheader_filename = "glibtop/loadavg.h", cname = "glibtop_loadavg", has_type_id = false, lower_case_cprefix = "glibtop_")]
	[GIR (name = "glibtop_loadavg")]
	public struct LoadAvg {
		public uint64 flags;
		[CCode (array_length = false)]
		public double loadavg[3];
		public uint64 nr_running;
		public uint64 nr_tasks;
		public uint64 last_pid;
	}
	[CCode (cheader_filename = "glibtop/machine.h", cname = "glibtop_machine", has_type_id = false, lower_case_cprefix = "glibtop_")]
	[GIR (name = "glibtop_machine")]
	public struct Machine {
	}
	[CCode (cheader_filename = "glibtop/procmap.h", cname = "glibtop_map_entry", lower_case_cprefix = "glibtop_", type_id = "glibtop_map_entry_get_type ()")]
	[GIR (name = "glibtop_map_entry")]
	public struct MapEntry {
		public uint64 flags;
		public uint64 start;
		public uint64 end;
		public uint64 offset;
		public uint64 perm;
		public uint64 inode;
		public uint64 device;
		public uint64 size;
		public uint64 rss;
		public uint64 shared_clean;
		public uint64 shared_dirty;
		public uint64 private_clean;
		public uint64 private_dirty;
		public uint64 pss;
		public uint64 swap;
		[CCode (array_length = false)]
		public char filename[216];
	}
	[CCode (cheader_filename = "glibtop/mem.h", cname = "glibtop_mem", has_type_id = false, lower_case_cprefix = "glibtop_")]
	[GIR (name = "glibtop_mem")]
	public struct Mem {
		public uint64 flags;
		public uint64 total;
		public uint64 used;
		public uint64 free;
		public uint64 shared;
		public uint64 buffer;
		public uint64 cached;
		public uint64 user;
		public uint64 locked;
	}
	[CCode (cheader_filename = "glibtop/mountlist.h", cname = "glibtop_mountentry", lower_case_cprefix = "glibtop_", type_id = "glibtop_mountentry_get_type ()")]
	[GIR (name = "glibtop_mountentry")]
	public struct MountEntry {
		public uint64 dev;
		[CCode (array_length = false)]
		public char devname[80];
		[CCode (array_length = false)]
		public char mountdir[80];
		[CCode (array_length = false)]
		public char type[80];
	}
	[CCode (cheader_filename = "glibtop/mountlist.h", cname = "glibtop_mountlist", lower_case_cprefix = "glibtop_", type_id = "glibtop_mountlist_get_type ()")]
	[GIR (name = "glibtop_mountlist")]
	public struct MountList {
		public uint64 flags;
		public uint64 number;
		public uint64 total;
		public uint64 size;
	}
	[CCode (cheader_filename = "glibtop/msg_limits.h", cname = "glibtop_msg_limits", has_type_id = false, lower_case_cprefix = "glibtop_")]
	[GIR (name = "glibtop_msg_limits")]
	public struct MsgLimits {
		public uint64 flags;
		public uint64 msgpool;
		public uint64 msgmap;
		public uint64 msgmax;
		public uint64 msgmnb;
		public uint64 msgmni;
		public uint64 msgssz;
		public uint64 msgtql;
	}
	[CCode (cheader_filename = "glibtop/netlist.h", cname = "glibtop_netlist", has_type_id = false, lower_case_cprefix = "glibtop_")]
	[GIR (name = "glibtop_netlist")]
	public struct NetList {
		public uint64 flags;
		public uint32 number;
	}
	[CCode (cheader_filename = "glibtop/netload.h", cname = "glibtop_netload", has_type_id = false, lower_case_cprefix = "glibtop_")]
	[GIR (name = "glibtop_netload")]
	public struct NetLoad {
		public uint64 flags;
		public uint64 if_flags;
		public uint32 mtu;
		public uint32 subnet;
		public uint32 address;
		public uint64 packets_in;
		public uint64 packets_out;
		public uint64 packets_total;
		public uint64 bytes_in;
		public uint64 bytes_out;
		public uint64 bytes_total;
		public uint64 errors_in;
		public uint64 errors_out;
		public uint64 errors_total;
		public uint64 collisions;
		[CCode (array_length = false)]
		public uint8 address6[16];
		[CCode (array_length = false)]
		public uint8 prefix6[16];
		public uint8 scope6;
		[CCode (array_length = false)]
		public uint8 hwaddress[8];
	}
	[CCode (cheader_filename = "glibtop/procopenfiles.h", cname = "glibtop_open_files_entry", lower_case_cprefix = "glibtop_", type_id = "glibtop_open_files_entry_get_type ()")]
	[GIR (name = "glibtop_open_files_entry")]
	public struct OpenFileEntry {
		public int fd;
		public uint16 type;
		[CCode (array_length = false, cname = "info.sock.dest_host")]
		public weak char info_sock_dest_host[47];
		[CCode (cname = "info.sock.dest_port")]
		public int info_sock_dest_port;
		[CCode (array_length = false, cname = "info.file.name")]
		public weak char info_file_name[216];
		[CCode (array_length = false, cname = "info.localsock.name")]
		public weak char info_localsock_name[216];
	}
	[CCode (cheader_filename = "glibtop/ppp.h", cname = "glibtop_ppp", has_type_id = false, lower_case_cprefix = "glibtop_")]
	[GIR (name = "glibtop_ppp")]
	public struct Ppp {
		public uint64 flags;
		public uint64 state;
		public uint64 bytes_in;
		public uint64 bytes_out;
	}
	[CCode (cheader_filename = "glibtop/procaffinity.h", cname = "glibtop_proc_affinity", has_type_id = false, lower_case_cprefix = "glibtop_")]
	[GIR (name = "glibtop_proc_affinity")]
	public struct ProcAffinity {
		public uint64 flags;
		public uint32 number;
		public bool all;
	}
	[CCode (cheader_filename = "glibtop/procargs.h", cname = "glibtop_proc_args", has_type_id = false, lower_case_cprefix = "glibtop_")]
	[GIR (name = "glibtop_proc_args")]
	public struct ProcArgs {
		public uint64 flags;
		public uint64 size;
	}
	[CCode (cheader_filename = "glibtop/procio.h", cname = "glibtop_proc_io", has_type_id = false, lower_case_cprefix = "glibtop_")]
	[GIR (name = "glibtop_proc_io")]
	public struct ProcIO {
		public uint64 flags;
		public uint64 disk_rchar;
		public uint64 disk_wchar;
		public uint64 disk_rbytes;
		public uint64 disk_wbytes;
		[CCode (array_length = false)]
		public uint64 reserved[10];
	}
	[CCode (cheader_filename = "glibtop/prockernel.h", cname = "glibtop_proc_kernel", has_type_id = false, lower_case_cprefix = "glibtop_")]
	[GIR (name = "glibtop_proc_kernel")]
	public struct ProcKernel {
		public uint64 flags;
		public uint64 k_flags;
		public uint64 min_flt;
		public uint64 maj_flt;
		public uint64 cmin_flt;
		public uint64 cmaj_flt;
		public uint64 kstk_esp;
		public uint64 kstk_eip;
		public uint64 nwchan;
		[CCode (array_length = false)]
		public char wchan[40];
	}
	[CCode (cheader_filename = "glibtop/command.h", cname = "glibtop_proclist", has_type_id = false, lower_case_cprefix = "glibtop_")]
	[GIR (name = "glibtop_proclist")]
	public struct ProcList {
		public uint64 flags;
		public uint64 number;
		public uint64 total;
		public uint64 size;
	}
	[CCode (cheader_filename = "glibtop/procmap.h", cname = "glibtop_proc_map", lower_case_cprefix = "glibtop_", type_id = "glibtop_proc_map_get_type ()")]
	[GIR (name = "glibtop_proc_map")]
	public struct ProcMap {
		public uint64 flags;
		public uint64 number;
		public uint64 total;
		public uint64 size;
	}
	[CCode (cheader_filename = "glibtop/procmem.h", cname = "glibtop_proc_mem", has_type_id = false, lower_case_cprefix = "glibtop_")]
	[GIR (name = "glibtop_proc_mem")]
	public struct ProcMem {
		public uint64 flags;
		public uint64 size;
		public uint64 vsize;
		public uint64 resident;
		public uint64 share;
		public uint64 rss;
		public uint64 rss_rlim;
	}
	[CCode (cheader_filename = "glibtop/procopenfiles.h", cname = "glibtop_proc_open_files", lower_case_cprefix = "glibtop_", type_id = "glibtop_proc_open_files_get_type ()")]
	[GIR (name = "glibtop_proc_open_files")]
	public struct ProcOpenFiles {
		public uint64 flags;
		public uint64 number;
		public uint64 total;
		public uint64 size;
	}
	[CCode (cheader_filename = "glibtop/procstate.h", cname = "glibtop_proc_state", has_type_id = false, lower_case_cprefix = "glibtop_")]
	[GIR (name = "glibtop_proc_state")]
	public struct ProcState {
		public uint64 flags;
		[CCode (array_length = false)]
		public char cmd[40];
		public uint state;
		public int uid;
		public int gid;
		public int ruid;
		public int rgid;
		public int has_cpu;
		public int processor;
		public int last_processor;
	}
	[CCode (cheader_filename = "glibtop/proctime.h", cname = "glibtop_proc_time", has_type_id = false, lower_case_cprefix = "glibtop_")]
	[GIR (name = "glibtop_proc_time")]
	public struct ProcTime {
		public uint64 start_time;
		public uint64 rtime;
		public uint64 utime;
		public uint64 stime;
		public uint64 cutime;
		public uint64 cstime;
		public uint64 timeout;
		public uint64 it_real_value;
		public uint64 frequency;
		[CCode (array_length = false)]
		public uint64 xcpu_utime[1024];
		[CCode (array_length = false)]
		public uint64 xcpu_stime[1024];
	}
	[CCode (cheader_filename = "glibtop/procuid.h", cname = "glibtop_proc_uid", has_type_id = false, lower_case_cprefix = "glibtop_")]
	[GIR (name = "glibtop_proc_uid")]
	public struct ProcUid {
		public uint64 flags;
		public int32 uid;
		public int32 euid;
		public int32 gid;
		public int32 egid;
		public int32 suid;
		public int32 sgid;
		public int32 fsuid;
		public int32 fsgid;
		public int32 pid;
		public int32 ppid;
		public int32 pgrp;
		public int32 session;
		public int32 tty;
		public int32 tpgid;
		public int32 priority;
		public int32 nice;
		public int32 ngroups;
		[CCode (array_length = false)]
		public int32 groups[64];
	}
	[CCode (cheader_filename = "glibtop/procwd.h", cname = "glibtop_proc_wd", has_type_id = false, lower_case_cprefix = "glibtop_")]
	[GIR (name = "glibtop_proc_wd")]
	public struct ProcWd {
		public uint64 flags;
		public uint32 number;
		[CCode (array_length = false)]
		public char root[216];
		[CCode (array_length = false)]
		public char exe[216];
	}
	[CCode (cheader_filename = "glibtop/command.h", cname = "glibtop_response_union", has_type_id = false, lower_case_cprefix = "glibtop_")]
	[GIR (name = "glibtop_response_union")]
	public struct ResponseUnion {
		public GTop.Union data;
		public GTop.SysDeps sysdeps;
	}
	[CCode (cheader_filename = "glibtop/procsegment.h", cname = "glibtop_proc_segment", has_type_id = false, lower_case_cprefix = "glibtop_")]
	[GIR (name = "glibtop_proc_segment")]
	public struct Segment {
		public uint64 flags;
		public uint64 text_rss;
		public uint64 shlib_rss;
		public uint64 data_rss;
		public uint64 stack_rss;
		public uint64 dirty_size;
		public uint64 start_code;
		public uint64 end_code;
		public uint64 start_stack;
	}
	[CCode (cheader_filename = "glibtop/sem_limits.h", cname = "glibtop_sem_limits", has_type_id = false, lower_case_cprefix = "glibtop_")]
	[GIR (name = "glibtop_sem_limits")]
	public struct SemLimits {
		public uint64 flags;
		public uint64 semmap;
		public uint64 semmni;
		public uint64 semmns;
		public uint64 semmnu;
		public uint64 semmsl;
		public uint64 semopm;
		public uint64 semume;
		public uint64 semusz;
		public uint64 semvmx;
		public uint64 semaem;
	}
	[CCode (cheader_filename = "glibtop/shm_limits.h", cname = "glibtop_shm_limits", has_type_id = false, lower_case_cprefix = "glibtop_")]
	[GIR (name = "glibtop_shm_limits")]
	public struct ShmLimits {
		public uint64 flags;
		public uint64 shmmax;
		public uint64 shmmin;
		public uint64 shmmni;
		public uint64 shmseg;
		public uint64 shmall;
	}
	[CCode (cheader_filename = "glibtop/procsignal.h", cname = "glibtop_proc_signal", has_type_id = false, lower_case_cprefix = "glibtop_")]
	[GIR (name = "glibtop_proc_signal")]
	public struct Signal {
		public uint64 flags;
		[CCode (array_length = false)]
		public uint64 @signal[2];
		[CCode (array_length = false)]
		public uint64 blocked[2];
		[CCode (array_length = false)]
		public uint64 sigignore[2];
		[CCode (array_length = false)]
		public uint64 sigcatch[2];
	}
	[CCode (cheader_filename = "glibtop/signal.h", cname = "glibtop_signame", has_type_id = false, lower_case_cprefix = "glibtop_")]
	[GIR (name = "glibtop_signame")]
	public struct Signame {
		public int number;
		public string name;
		public string label;
	}
	[CCode (cheader_filename = "glibtop/swap.h", cname = "glibtop_swap", has_type_id = false, lower_case_cprefix = "glibtop_")]
	[GIR (name = "glibtop_swap")]
	public struct Swap {
		public uint64 flags;
		public uint64 total;
		public uint64 used;
		public uint64 free;
		public uint64 pagein;
		public uint64 pageout;
	}
	[CCode (cheader_filename = "glibtop/sysdeps.h", cname = "glibtop_sysdeps", has_type_id = false, lower_case_cprefix = "glibtop_")]
	[GIR (name = "glibtop_sysdeps")]
	public struct SysDeps {
		public uint64 flags;
		public uint64 features;
		public uint64 cpu;
		public uint64 mem;
		public uint64 swap;
		public uint64 uptime;
		public uint64 loadavg;
		public uint64 shm_limits;
		public uint64 msg_limits;
		public uint64 sem_limits;
		public uint64 proclist;
		public uint64 proc_state;
		public uint64 proc_uid;
		public uint64 proc_mem;
		public uint64 proc_time;
		public uint64 proc_signal;
		public uint64 proc_kernel;
		public uint64 proc_segment;
		public uint64 proc_args;
		public uint64 proc_map;
		public uint64 proc_open_files;
		public uint64 mountlist;
		public uint64 fsusage;
		public uint64 netlist;
		public uint64 netload;
		public uint64 ppp;
		public uint64 proc_wd;
		public uint64 proc_affinity;
		public uint64 proc_io;
		public uint64 reserved0;
		public uint64 reserved1;
		public uint64 reserved2;
		public uint64 reserved3;
		public uint64 reserved4;
		public uint64 reserved5;
		public uint64 reserved6;
		public uint64 reserved7;
	}
	[CCode (cheader_filename = "glibtop/sysinfo.h", cname = "glibtop_sysinfo", has_type_id = false, lower_case_cprefix = "glibtop_")]
	[GIR (name = "glibtop_sysinfo")]
	public struct SysInfo {
		public uint64 flags;
		public uint64 ncpu;
		[CCode (array_length = false)]
		public GTop.Entry cpuinfo[1024];
	}
	[CCode (cheader_filename = "glibtop/union.h", cname = "glibtop_union", has_type_id = false, lower_case_cprefix = "glibtop_")]
	[GIR (name = "glibtop_union")]
	public struct Union {
		public GTop.Cpu cpu;
		public GTop.Mem mem;
		public GTop.Swap swap;
		public GTop.Uptime uptime;
		public GTop.LoadAvg loadavg;
		public GTop.ShmLimits shm_limits;
		public GTop.MsgLimits msg_limits;
		public GTop.SemLimits sem_limits;
		public GTop.ProcList proclist;
		public GTop.ProcState proc_state;
		public GTop.ProcUid proc_uid;
		public GTop.ProcMem proc_mem;
		public GTop.ProcTime proc_time;
		public GTop.Signal proc_signal;
		public GTop.ProcKernel proc_kernel;
		public GTop.Segment proc_segment;
		public GTop.ProcArgs proc_args;
		public GTop.ProcMap proc_map;
		public GTop.MountList mountlist;
		public GTop.FsUsage fsusage;
		public GTop.NetList netlist;
		public GTop.NetLoad netload;
		public GTop.Ppp ppp;
		public GTop.ProcOpenFiles proc_open_files;
		public GTop.ProcWd proc_wd;
		public GTop.ProcAffinity proc_affinity;
		public GTop.ProcIO proc_io;
	}
	[CCode (cheader_filename = "glibtop/uptime.h", cname = "glibtop_uptime", has_type_id = false, lower_case_cprefix = "glibtop_")]
	[GIR (name = "glibtop_uptime")]
	public struct Uptime {
		public uint64 flags;
		public double uptime;
		public double idletime;
		public uint64 boot_time;
	}
	[CCode (cheader_filename = "glibtop.h", cname = "AUTH_NAMESZ")]
	public const int AUTH_NAMESZ;
	[CCode (cheader_filename = "glibtop.h", cname = "AUTH_TIMEOUT")]
	public const int AUTH_TIMEOUT;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CMND_CPU")]
	public const int CMND_CPU;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CMND_FSUSAGE")]
	public const int CMND_FSUSAGE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CMND_LOADAVG")]
	public const int CMND_LOADAVG;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CMND_MEM")]
	public const int CMND_MEM;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CMND_MOUNTLIST")]
	public const int CMND_MOUNTLIST;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CMND_MSG_LIMITS")]
	public const int CMND_MSG_LIMITS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CMND_NETLIST")]
	public const int CMND_NETLIST;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CMND_NETLOAD")]
	public const int CMND_NETLOAD;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CMND_PPP")]
	public const int CMND_PPP;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CMND_PROCLIST")]
	public const int CMND_PROCLIST;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CMND_PROC_AFFINITY")]
	public const int CMND_PROC_AFFINITY;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CMND_PROC_ARGS")]
	public const int CMND_PROC_ARGS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CMND_PROC_IO")]
	public const int CMND_PROC_IO;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CMND_PROC_KERNEL")]
	public const int CMND_PROC_KERNEL;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CMND_PROC_MAP")]
	public const int CMND_PROC_MAP;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CMND_PROC_MEM")]
	public const int CMND_PROC_MEM;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CMND_PROC_OPEN_FILES")]
	public const int CMND_PROC_OPEN_FILES;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CMND_PROC_SEGMENT")]
	public const int CMND_PROC_SEGMENT;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CMND_PROC_SIGNAL")]
	public const int CMND_PROC_SIGNAL;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CMND_PROC_STATE")]
	public const int CMND_PROC_STATE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CMND_PROC_TIME")]
	public const int CMND_PROC_TIME;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CMND_PROC_UID")]
	public const int CMND_PROC_UID;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CMND_PROC_WD")]
	public const int CMND_PROC_WD;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CMND_QUIT")]
	public const int CMND_QUIT;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CMND_SEM_LIMITS")]
	public const int CMND_SEM_LIMITS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CMND_SHM_LIMITS")]
	public const int CMND_SHM_LIMITS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CMND_SWAP")]
	public const int CMND_SWAP;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CMND_SYSDEPS")]
	public const int CMND_SYSDEPS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CMND_UPTIME")]
	public const int CMND_UPTIME;
	[CCode (cheader_filename = "glibtop.h", cname = "CONN_INTERNET")]
	public const int CONN_INTERNET;
	[CCode (cheader_filename = "glibtop.h", cname = "CONN_IPC")]
	public const int CONN_IPC;
	[CCode (cheader_filename = "glibtop.h", cname = "CONN_UNIX")]
	public const int CONN_UNIX;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CPU_FREQUENCY")]
	public const int CPU_FREQUENCY;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CPU_IDLE")]
	public const int CPU_IDLE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CPU_IOWAIT")]
	public const int CPU_IOWAIT;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CPU_IRQ")]
	public const int CPU_IRQ;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CPU_NICE")]
	public const int CPU_NICE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CPU_SOFTIRQ")]
	public const int CPU_SOFTIRQ;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CPU_SYS")]
	public const int CPU_SYS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CPU_TOTAL")]
	public const int CPU_TOTAL;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_CPU_USER")]
	public const int CPU_USER;
	[CCode (cheader_filename = "glibtop.h", cname = "DEFAULT_PORT")]
	public const int DEFAULT_PORT;
	[CCode (cheader_filename = "glibtop.h", cname = "DEFAUTH_NAME")]
	public const string DEFAUTH_NAME;
	[CCode (cheader_filename = "glibtop.h", cname = "EOT_CHR")]
	public const int EOT_CHR;
	[CCode (cheader_filename = "glibtop.h", cname = "EOT_STR")]
	public const string EOT_STR;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_ERROR_METHOD_ABORT")]
	public const int ERROR_METHOD_ABORT;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_ERROR_METHOD_IGNORE")]
	public const int ERROR_METHOD_IGNORE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_ERROR_METHOD_WARN")]
	public const int ERROR_METHOD_WARN;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_ERROR_METHOD_WARN_ONCE")]
	public const int ERROR_METHOD_WARN_ONCE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_EXCLUDE_IDLE")]
	public const int EXCLUDE_IDLE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_EXCLUDE_NOTTY")]
	public const int EXCLUDE_NOTTY;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_EXCLUDE_SYSTEM")]
	public const int EXCLUDE_SYSTEM;
	[CCode (cheader_filename = "glibtop.h", cname = "FALSE")]
	public const int FALSE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_FEATURES_EXCEPT")]
	public const int FEATURES_EXCEPT;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_FEATURES_NO_SERVER")]
	public const int FEATURES_NO_SERVER;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_FILE_ENTRY_FD")]
	public const int FILE_ENTRY_FD;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_FILE_ENTRY_INETSOCKET_DST_HOST")]
	public const int FILE_ENTRY_INETSOCKET_DST_HOST;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_FILE_ENTRY_INETSOCKET_DST_PORT")]
	public const int FILE_ENTRY_INETSOCKET_DST_PORT;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_FILE_ENTRY_NAME")]
	public const int FILE_ENTRY_NAME;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_FILE_ENTRY_TYPE")]
	public const int FILE_ENTRY_TYPE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_FSUSAGE_BAVAIL")]
	public const int FSUSAGE_BAVAIL;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_FSUSAGE_BFREE")]
	public const int FSUSAGE_BFREE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_FSUSAGE_BLOCKS")]
	public const int FSUSAGE_BLOCKS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_FSUSAGE_BLOCK_SIZE")]
	public const int FSUSAGE_BLOCK_SIZE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_FSUSAGE_FFREE")]
	public const int FSUSAGE_FFREE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_FSUSAGE_FILES")]
	public const int FSUSAGE_FILES;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_FSUSAGE_READ")]
	public const int FSUSAGE_READ;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_FSUSAGE_WRITE")]
	public const int FSUSAGE_WRITE;
	[CCode (cheader_filename = "glibtop.h", cname = "HOSTNAMSZ")]
	public const int HOSTNAMSZ;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_INIT_NO_INIT")]
	public const int INIT_NO_INIT;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_INIT_NO_OPEN")]
	public const int INIT_NO_OPEN;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_IPC_MSGMAP")]
	public const int IPC_MSGMAP;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_IPC_MSGMAX")]
	public const int IPC_MSGMAX;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_IPC_MSGMNB")]
	public const int IPC_MSGMNB;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_IPC_MSGMNI")]
	public const int IPC_MSGMNI;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_IPC_MSGPOOL")]
	public const int IPC_MSGPOOL;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_IPC_MSGSSZ")]
	public const int IPC_MSGSSZ;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_IPC_MSGTQL")]
	public const int IPC_MSGTQL;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_IPC_SEMAEM")]
	public const int IPC_SEMAEM;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_IPC_SEMMAP")]
	public const int IPC_SEMMAP;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_IPC_SEMMNI")]
	public const int IPC_SEMMNI;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_IPC_SEMMNS")]
	public const int IPC_SEMMNS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_IPC_SEMMNU")]
	public const int IPC_SEMMNU;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_IPC_SEMMSL")]
	public const int IPC_SEMMSL;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_IPC_SEMOPM")]
	public const int IPC_SEMOPM;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_IPC_SEMUME")]
	public const int IPC_SEMUME;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_IPC_SEMUSZ")]
	public const int IPC_SEMUSZ;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_IPC_SEMVMX")]
	public const int IPC_SEMVMX;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_IPC_SHMALL")]
	public const int IPC_SHMALL;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_IPC_SHMMAX")]
	public const int IPC_SHMMAX;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_IPC_SHMMIN")]
	public const int IPC_SHMMIN;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_IPC_SHMMNI")]
	public const int IPC_SHMMNI;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_IPC_SHMSEG")]
	public const int IPC_SHMSEG;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_KERN_PROC_ALL")]
	public const int KERN_PROC_ALL;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_KERN_PROC_MASK")]
	public const int KERN_PROC_MASK;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_KERN_PROC_PGRP")]
	public const int KERN_PROC_PGRP;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_KERN_PROC_PID")]
	public const int KERN_PROC_PID;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_KERN_PROC_RUID")]
	public const int KERN_PROC_RUID;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_KERN_PROC_SESSION")]
	public const int KERN_PROC_SESSION;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_KERN_PROC_TTY")]
	public const int KERN_PROC_TTY;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_KERN_PROC_UID")]
	public const int KERN_PROC_UID;
	[CCode (cheader_filename = "glibtop.h", cname = "LIBGTOP_MAJOR_VERSION")]
	public const int LIBGTOP_MAJOR_VERSION;
	[CCode (cheader_filename = "glibtop.h", cname = "LIBGTOP_MICRO_VERSION")]
	public const int LIBGTOP_MICRO_VERSION;
	[CCode (cheader_filename = "glibtop.h", cname = "LIBGTOP_MINOR_VERSION")]
	public const int LIBGTOP_MINOR_VERSION;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_LOADAVG_LAST_PID")]
	public const int LOADAVG_LAST_PID;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_LOADAVG_LOADAVG")]
	public const int LOADAVG_LOADAVG;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_LOADAVG_NR_RUNNING")]
	public const int LOADAVG_NR_RUNNING;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_LOADAVG_NR_TASKS")]
	public const int LOADAVG_NR_TASKS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAP_ENTRY_DEVICE")]
	public const int MAP_ENTRY_DEVICE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAP_ENTRY_END")]
	public const int MAP_ENTRY_END;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAP_ENTRY_FILENAME")]
	public const int MAP_ENTRY_FILENAME;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAP_ENTRY_INODE")]
	public const int MAP_ENTRY_INODE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAP_ENTRY_OFFSET")]
	public const int MAP_ENTRY_OFFSET;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAP_ENTRY_PERM")]
	public const int MAP_ENTRY_PERM;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAP_ENTRY_PRIVATE_CLEAN")]
	public const int MAP_ENTRY_PRIVATE_CLEAN;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAP_ENTRY_PRIVATE_DIRTY")]
	public const int MAP_ENTRY_PRIVATE_DIRTY;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAP_ENTRY_PSS")]
	public const int MAP_ENTRY_PSS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAP_ENTRY_RSS")]
	public const int MAP_ENTRY_RSS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAP_ENTRY_SHARED_CLEAN")]
	public const int MAP_ENTRY_SHARED_CLEAN;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAP_ENTRY_SHARED_DIRTY")]
	public const int MAP_ENTRY_SHARED_DIRTY;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAP_ENTRY_SIZE")]
	public const int MAP_ENTRY_SIZE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAP_ENTRY_START")]
	public const int MAP_ENTRY_START;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAP_ENTRY_SWAP")]
	public const int MAP_ENTRY_SWAP;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAP_FILENAME_LEN")]
	public const int MAP_FILENAME_LEN;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAP_PERM_EXECUTE")]
	public const int MAP_PERM_EXECUTE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAP_PERM_PRIVATE")]
	public const int MAP_PERM_PRIVATE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAP_PERM_READ")]
	public const int MAP_PERM_READ;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAP_PERM_SHARED")]
	public const int MAP_PERM_SHARED;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAP_PERM_WRITE")]
	public const int MAP_PERM_WRITE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_CMND")]
	public const int MAX_CMND;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_CPU")]
	public const int MAX_CPU;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_FSUSAGE")]
	public const int MAX_FSUSAGE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_GROUPS")]
	public const int MAX_GROUPS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_LOADAVG")]
	public const int MAX_LOADAVG;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_MAP_ENTRY")]
	public const int MAX_MAP_ENTRY;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_MEM")]
	public const int MAX_MEM;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_MOUNTLIST")]
	public const int MAX_MOUNTLIST;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_MSG_LIMITS")]
	public const int MAX_MSG_LIMITS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_NETLIST")]
	public const int MAX_NETLIST;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_NETLOAD")]
	public const int MAX_NETLOAD;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_OPEN_FILE_ENTRY")]
	public const int MAX_OPEN_FILE_ENTRY;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_PPP")]
	public const int MAX_PPP;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_PROCLIST")]
	public const int MAX_PROCLIST;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_PROC_AFFINITY")]
	public const int MAX_PROC_AFFINITY;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_PROC_ARGS")]
	public const int MAX_PROC_ARGS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_PROC_IO")]
	public const int MAX_PROC_IO;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_PROC_KERNEL")]
	public const int MAX_PROC_KERNEL;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_PROC_MAP")]
	public const int MAX_PROC_MAP;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_PROC_MEM")]
	public const int MAX_PROC_MEM;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_PROC_OPEN_FILES")]
	public const int MAX_PROC_OPEN_FILES;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_PROC_SEGMENT")]
	public const int MAX_PROC_SEGMENT;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_PROC_SIGNAL")]
	public const int MAX_PROC_SIGNAL;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_PROC_STATE")]
	public const int MAX_PROC_STATE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_PROC_TIME")]
	public const int MAX_PROC_TIME;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_PROC_UID")]
	public const int MAX_PROC_UID;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_PROC_WD")]
	public const int MAX_PROC_WD;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_SEM_LIMITS")]
	public const int MAX_SEM_LIMITS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_SHM_LIMITS")]
	public const int MAX_SHM_LIMITS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_SWAP")]
	public const int MAX_SWAP;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_SYSDEPS")]
	public const int MAX_SYSDEPS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_SYSINFO")]
	public const int MAX_SYSINFO;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MAX_UPTIME")]
	public const int MAX_UPTIME;
	[CCode (cheader_filename = "glibtop.h", cname = "MCOOKIE_NAME")]
	public const string MCOOKIE_NAME;
	[CCode (cheader_filename = "glibtop.h", cname = "MCOOKIE_SCREEN")]
	public const string MCOOKIE_SCREEN;
	[CCode (cheader_filename = "glibtop.h", cname = "MCOOKIE_X_NAME")]
	public const string MCOOKIE_X_NAME;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MEM_BUFFER")]
	public const int MEM_BUFFER;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MEM_CACHED")]
	public const int MEM_CACHED;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MEM_FREE")]
	public const int MEM_FREE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MEM_LOCKED")]
	public const int MEM_LOCKED;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MEM_SHARED")]
	public const int MEM_SHARED;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MEM_TOTAL")]
	public const int MEM_TOTAL;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MEM_USED")]
	public const int MEM_USED;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MEM_USER")]
	public const int MEM_USER;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_METHOD_DIRECT")]
	public const int METHOD_DIRECT;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_METHOD_INET")]
	public const int METHOD_INET;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_METHOD_PIPE")]
	public const int METHOD_PIPE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_METHOD_UNIX")]
	public const int METHOD_UNIX;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MOUNTENTRY_LEN")]
	public const int MOUNTENTRY_LEN;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MOUNTLIST_NUMBER")]
	public const int MOUNTLIST_NUMBER;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MOUNTLIST_SIZE")]
	public const int MOUNTLIST_SIZE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_MOUNTLIST_TOTAL")]
	public const int MOUNTLIST_TOTAL;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_NCPU")]
	public const int NCPU;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_NETLIST_NUMBER")]
	public const int NETLIST_NUMBER;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_NETLOAD_ADDRESS")]
	public const int NETLOAD_ADDRESS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_NETLOAD_ADDRESS6")]
	public const int NETLOAD_ADDRESS6;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_NETLOAD_BYTES_IN")]
	public const int NETLOAD_BYTES_IN;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_NETLOAD_BYTES_OUT")]
	public const int NETLOAD_BYTES_OUT;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_NETLOAD_BYTES_TOTAL")]
	public const int NETLOAD_BYTES_TOTAL;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_NETLOAD_COLLISIONS")]
	public const int NETLOAD_COLLISIONS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_NETLOAD_ERRORS_IN")]
	public const int NETLOAD_ERRORS_IN;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_NETLOAD_ERRORS_OUT")]
	public const int NETLOAD_ERRORS_OUT;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_NETLOAD_ERRORS_TOTAL")]
	public const int NETLOAD_ERRORS_TOTAL;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_NETLOAD_HWADDRESS")]
	public const int NETLOAD_HWADDRESS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_NETLOAD_IF_FLAGS")]
	public const int NETLOAD_IF_FLAGS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_NETLOAD_MTU")]
	public const int NETLOAD_MTU;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_NETLOAD_PACKETS_IN")]
	public const int NETLOAD_PACKETS_IN;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_NETLOAD_PACKETS_OUT")]
	public const int NETLOAD_PACKETS_OUT;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_NETLOAD_PACKETS_TOTAL")]
	public const int NETLOAD_PACKETS_TOTAL;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_NETLOAD_PREFIX6")]
	public const int NETLOAD_PREFIX6;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_NETLOAD_SCOPE6")]
	public const int NETLOAD_SCOPE6;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_NETLOAD_SUBNET")]
	public const int NETLOAD_SUBNET;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_OPEN_DEST_HOST_LEN")]
	public const int OPEN_DEST_HOST_LEN;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_OPEN_FILENAME_LEN")]
	public const int OPEN_FILENAME_LEN;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PARAM_COMMAND")]
	public const int PARAM_COMMAND;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PARAM_ERROR_METHOD")]
	public const int PARAM_ERROR_METHOD;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PARAM_FEATURES")]
	public const int PARAM_FEATURES;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PARAM_HOST")]
	public const int PARAM_HOST;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PARAM_METHOD")]
	public const int PARAM_METHOD;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PARAM_PORT")]
	public const int PARAM_PORT;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PARAM_REQUIRED")]
	public const int PARAM_REQUIRED;
	[CCode (cheader_filename = "glibtop.h", cname = "PATCHLEVEL")]
	public const int PATCHLEVEL;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PPP_BYTES_IN")]
	public const int PPP_BYTES_IN;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PPP_BYTES_OUT")]
	public const int PPP_BYTES_OUT;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PPP_STATE")]
	public const int PPP_STATE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROCESS_DEAD")]
	public const int PROCESS_DEAD;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROCESS_INTERRUPTIBLE")]
	public const int PROCESS_INTERRUPTIBLE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROCESS_RUNNING")]
	public const int PROCESS_RUNNING;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROCESS_STOPPED")]
	public const int PROCESS_STOPPED;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROCESS_SWAPPING")]
	public const int PROCESS_SWAPPING;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROCESS_UNINTERRUPTIBLE")]
	public const int PROCESS_UNINTERRUPTIBLE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROCESS_ZOMBIE")]
	public const int PROCESS_ZOMBIE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROCLIST_NUMBER")]
	public const int PROCLIST_NUMBER;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROCLIST_SIZE")]
	public const int PROCLIST_SIZE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROCLIST_TOTAL")]
	public const int PROCLIST_TOTAL;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_AFFINITY_ALL")]
	public const int PROC_AFFINITY_ALL;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_AFFINITY_NUMBER")]
	public const int PROC_AFFINITY_NUMBER;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_ARGS_SIZE")]
	public const int PROC_ARGS_SIZE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_IO_DISK_RBYTES")]
	public const int PROC_IO_DISK_RBYTES;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_IO_DISK_RCHAR")]
	public const int PROC_IO_DISK_RCHAR;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_IO_DISK_WBYTES")]
	public const int PROC_IO_DISK_WBYTES;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_IO_DISK_WCHAR")]
	public const int PROC_IO_DISK_WCHAR;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_KERNEL_CMAJ_FLT")]
	public const int PROC_KERNEL_CMAJ_FLT;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_KERNEL_CMIN_FLT")]
	public const int PROC_KERNEL_CMIN_FLT;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_KERNEL_KSTK_EIP")]
	public const int PROC_KERNEL_KSTK_EIP;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_KERNEL_KSTK_ESP")]
	public const int PROC_KERNEL_KSTK_ESP;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_KERNEL_K_FLAGS")]
	public const int PROC_KERNEL_K_FLAGS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_KERNEL_MAJ_FLT")]
	public const int PROC_KERNEL_MAJ_FLT;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_KERNEL_MIN_FLT")]
	public const int PROC_KERNEL_MIN_FLT;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_KERNEL_NWCHAN")]
	public const int PROC_KERNEL_NWCHAN;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_KERNEL_WCHAN")]
	public const int PROC_KERNEL_WCHAN;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_MAP_NUMBER")]
	public const int PROC_MAP_NUMBER;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_MAP_SIZE")]
	public const int PROC_MAP_SIZE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_MAP_TOTAL")]
	public const int PROC_MAP_TOTAL;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_MEM_RESIDENT")]
	public const int PROC_MEM_RESIDENT;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_MEM_RSS")]
	public const int PROC_MEM_RSS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_MEM_RSS_RLIM")]
	public const int PROC_MEM_RSS_RLIM;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_MEM_SHARE")]
	public const int PROC_MEM_SHARE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_MEM_SIZE")]
	public const int PROC_MEM_SIZE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_MEM_VSIZE")]
	public const int PROC_MEM_VSIZE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_OPEN_FILES_NUMBER")]
	public const int PROC_OPEN_FILES_NUMBER;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_OPEN_FILES_SIZE")]
	public const int PROC_OPEN_FILES_SIZE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_OPEN_FILES_TOTAL")]
	public const int PROC_OPEN_FILES_TOTAL;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_SEGMENT_DATA_RSS")]
	public const int PROC_SEGMENT_DATA_RSS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_SEGMENT_DIRTY_SIZE")]
	public const int PROC_SEGMENT_DIRTY_SIZE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_SEGMENT_END_CODE")]
	public const int PROC_SEGMENT_END_CODE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_SEGMENT_SHLIB_RSS")]
	public const int PROC_SEGMENT_SHLIB_RSS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_SEGMENT_STACK_RSS")]
	public const int PROC_SEGMENT_STACK_RSS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_SEGMENT_START_CODE")]
	public const int PROC_SEGMENT_START_CODE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_SEGMENT_START_STACK")]
	public const int PROC_SEGMENT_START_STACK;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_SEGMENT_TEXT_RSS")]
	public const int PROC_SEGMENT_TEXT_RSS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_SIGNAL_BLOCKED")]
	public const int PROC_SIGNAL_BLOCKED;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_SIGNAL_SIGCATCH")]
	public const int PROC_SIGNAL_SIGCATCH;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_SIGNAL_SIGIGNORE")]
	public const int PROC_SIGNAL_SIGIGNORE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_SIGNAL_SIGNAL")]
	public const int PROC_SIGNAL_SIGNAL;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_STATE_CMD")]
	public const int PROC_STATE_CMD;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_STATE_GID")]
	public const int PROC_STATE_GID;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_STATE_HAS_CPU")]
	public const int PROC_STATE_HAS_CPU;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_STATE_LAST_PROCESSOR")]
	public const int PROC_STATE_LAST_PROCESSOR;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_STATE_PROCESSOR")]
	public const int PROC_STATE_PROCESSOR;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_STATE_RGID")]
	public const int PROC_STATE_RGID;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_STATE_RUID")]
	public const int PROC_STATE_RUID;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_STATE_STATE")]
	public const int PROC_STATE_STATE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_STATE_UID")]
	public const int PROC_STATE_UID;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_TIME_CSTIME")]
	public const int PROC_TIME_CSTIME;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_TIME_CUTIME")]
	public const int PROC_TIME_CUTIME;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_TIME_FREQUENCY")]
	public const int PROC_TIME_FREQUENCY;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_TIME_IT_REAL_VALUE")]
	public const int PROC_TIME_IT_REAL_VALUE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_TIME_RTIME")]
	public const int PROC_TIME_RTIME;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_TIME_START_TIME")]
	public const int PROC_TIME_START_TIME;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_TIME_STIME")]
	public const int PROC_TIME_STIME;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_TIME_TIMEOUT")]
	public const int PROC_TIME_TIMEOUT;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_TIME_UTIME")]
	public const int PROC_TIME_UTIME;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_TIME_XCPU_STIME")]
	public const int PROC_TIME_XCPU_STIME;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_TIME_XCPU_UTIME")]
	public const int PROC_TIME_XCPU_UTIME;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_UID_EGID")]
	public const int PROC_UID_EGID;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_UID_EUID")]
	public const int PROC_UID_EUID;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_UID_FSGID")]
	public const int PROC_UID_FSGID;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_UID_FSUID")]
	public const int PROC_UID_FSUID;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_UID_GID")]
	public const int PROC_UID_GID;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_UID_GROUPS")]
	public const int PROC_UID_GROUPS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_UID_NGROUPS")]
	public const int PROC_UID_NGROUPS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_UID_NICE")]
	public const int PROC_UID_NICE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_UID_PGRP")]
	public const int PROC_UID_PGRP;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_UID_PID")]
	public const int PROC_UID_PID;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_UID_PPID")]
	public const int PROC_UID_PPID;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_UID_PRIORITY")]
	public const int PROC_UID_PRIORITY;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_UID_SESSION")]
	public const int PROC_UID_SESSION;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_UID_SGID")]
	public const int PROC_UID_SGID;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_UID_SUID")]
	public const int PROC_UID_SUID;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_UID_TPGID")]
	public const int PROC_UID_TPGID;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_UID_TTY")]
	public const int PROC_UID_TTY;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_UID_UID")]
	public const int PROC_UID_UID;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_WD_EXE")]
	public const int PROC_WD_EXE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_WD_EXE_LEN")]
	public const int PROC_WD_EXE_LEN;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_WD_NUMBER")]
	public const int PROC_WD_NUMBER;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_WD_ROOT")]
	public const int PROC_WD_ROOT;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_PROC_WD_ROOT_LEN")]
	public const int PROC_WD_ROOT_LEN;
	[CCode (cheader_filename = "glibtop.h", cname = "REPLYSIZ")]
	public const int REPLYSIZ;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SWAP_FREE")]
	public const int SWAP_FREE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SWAP_PAGEIN")]
	public const int SWAP_PAGEIN;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SWAP_PAGEOUT")]
	public const int SWAP_PAGEOUT;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SWAP_TOTAL")]
	public const int SWAP_TOTAL;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SWAP_USED")]
	public const int SWAP_USED;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SYSDEPS_ALL")]
	public const int SYSDEPS_ALL;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SYSDEPS_CPU")]
	public const int SYSDEPS_CPU;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SYSDEPS_FEATURES")]
	public const int SYSDEPS_FEATURES;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SYSDEPS_FSUSAGE")]
	public const int SYSDEPS_FSUSAGE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SYSDEPS_LOADAVG")]
	public const int SYSDEPS_LOADAVG;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SYSDEPS_MEM")]
	public const int SYSDEPS_MEM;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SYSDEPS_MOUNTLIST")]
	public const int SYSDEPS_MOUNTLIST;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SYSDEPS_MSG_LIMITS")]
	public const int SYSDEPS_MSG_LIMITS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SYSDEPS_NETLIST")]
	public const int SYSDEPS_NETLIST;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SYSDEPS_NETLOAD")]
	public const int SYSDEPS_NETLOAD;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SYSDEPS_PPP")]
	public const int SYSDEPS_PPP;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SYSDEPS_PROCLIST")]
	public const int SYSDEPS_PROCLIST;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SYSDEPS_PROC_AFFINITY")]
	public const int SYSDEPS_PROC_AFFINITY;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SYSDEPS_PROC_ARGS")]
	public const int SYSDEPS_PROC_ARGS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SYSDEPS_PROC_IO")]
	public const int SYSDEPS_PROC_IO;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SYSDEPS_PROC_KERNEL")]
	public const int SYSDEPS_PROC_KERNEL;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SYSDEPS_PROC_MAP")]
	public const int SYSDEPS_PROC_MAP;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SYSDEPS_PROC_MEM")]
	public const int SYSDEPS_PROC_MEM;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SYSDEPS_PROC_OPEN_FILES")]
	public const int SYSDEPS_PROC_OPEN_FILES;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SYSDEPS_PROC_SEGMENT")]
	public const int SYSDEPS_PROC_SEGMENT;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SYSDEPS_PROC_SIGNAL")]
	public const int SYSDEPS_PROC_SIGNAL;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SYSDEPS_PROC_STATE")]
	public const int SYSDEPS_PROC_STATE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SYSDEPS_PROC_TIME")]
	public const int SYSDEPS_PROC_TIME;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SYSDEPS_PROC_UID")]
	public const int SYSDEPS_PROC_UID;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SYSDEPS_PROC_WD")]
	public const int SYSDEPS_PROC_WD;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SYSDEPS_SEM_LIMITS")]
	public const int SYSDEPS_SEM_LIMITS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SYSDEPS_SHM_LIMITS")]
	public const int SYSDEPS_SHM_LIMITS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SYSDEPS_SWAP")]
	public const int SYSDEPS_SWAP;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SYSDEPS_UPTIME")]
	public const int SYSDEPS_UPTIME;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SYSINFO_CPUINFO")]
	public const int SYSINFO_CPUINFO;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_SYSINFO_NCPU")]
	public const int SYSINFO_NCPU;
	[CCode (cheader_filename = "glibtop.h", cname = "TABLE_SIZE")]
	public const int TABLE_SIZE;
	[CCode (cheader_filename = "glibtop.h", cname = "TRUE")]
	public const int TRUE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_UPTIME_BOOT_TIME")]
	public const int UPTIME_BOOT_TIME;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_UPTIME_IDLETIME")]
	public const int UPTIME_IDLETIME;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_UPTIME_UPTIME")]
	public const int UPTIME_UPTIME;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_XCPU_FLAGS")]
	public const int XCPU_FLAGS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_XCPU_IDLE")]
	public const int XCPU_IDLE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_XCPU_IOWAIT")]
	public const int XCPU_IOWAIT;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_XCPU_IRQ")]
	public const int XCPU_IRQ;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_XCPU_NICE")]
	public const int XCPU_NICE;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_XCPU_SOFTIRQ")]
	public const int XCPU_SOFTIRQ;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_XCPU_SYS")]
	public const int XCPU_SYS;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_XCPU_TOTAL")]
	public const int XCPU_TOTAL;
	[CCode (cheader_filename = "glibtop.h", cname = "GLIBTOP_XCPU_USER")]
	public const int XCPU_USER;
}
